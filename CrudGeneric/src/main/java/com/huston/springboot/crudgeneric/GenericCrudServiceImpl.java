package com.huston.springboot.crudgeneric;

import com.huston.springboot.crudgeneric.exception.AllianceException;
import com.huston.springboot.crudgeneric.exception.CrudGenericException;
import com.huston.springboot.crudgeneric.pagination.ResultPage;
import com.huston.springboot.crudgeneric.resultadapter.ServiceUtil;
import com.java.service.LoggerFile;
import com.java.service.Pagenator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.util.*;
import java.util.stream.Collectors;

/**
 * **********************************NOTE*******************************************
 * Please do not edit this file unnecessarily !
 * Modifying this file would be error prone and would lead the system to error paradise
 * If the necessity of modifying is high please contact @authors
 * **********************************NOTE*******************************************
 * @author nayana, ravindu
 * @param <T> repository type
 * @param <T1> resource type
 */
public class GenericCrudServiceImpl<T extends GenericCrudRepository,T1 extends GenericCrudEntity> extends ServiceUtil<T1> implements GenericCrudService<T1> {

    @Autowired
    public T repository;
    private LoggerFile loggerFile = new LoggerFile(this.getClass());

    @Deprecated
    @Override
    public <ID extends Serializable> T1 get(ID primaryKey){
        return (T1) repository.getOne(primaryKey);
    }


    @Override
    public <ID extends Serializable> T1 getReference(ID primaryKey){
        return (T1) repository.getOne(primaryKey);
    }

    @Override
    public <ID extends Serializable> T1 find(ID primaryKey){
        return (T1) repository.findById(primaryKey).get();
    }

    @Override
    public List<T1> get(){
        loggerFile.createLog("index",LoggerFile.LogType.INFO,"Full list loaded");
        return repository.findAll();
    }

    @Override
    public List<T1> get(String ... alliancesFields){
        List<T1> results = repository.findAll();
        try{
            results = loadAlliances(results,alliancesFields);
        }catch (AllianceException| CrudGenericException e){
            e.printStackTrace();
        }
        loggerFile.createLog("index",LoggerFile.LogType.INFO,"List with alliances fields loaded",alliancesFields);
        return results;
    }

    @Override
    public List<T1> get(Specification<T1> specification){
        List<T1> results = repository.findAll(specification);
        loggerFile.createLog("index",LoggerFile.LogType.INFO,"List loaded with specification");
        return results;
    }

    @Override
    public List<T1> get(Specification<T1> specification, String ... alliancesFields){
        List<T1> results = repository.findAll(specification);
        try{
            results = loadAlliances(results,alliancesFields);
        }catch (AllianceException| CrudGenericException e){
            e.printStackTrace();
        }
        loggerFile.createLog("index",LoggerFile.LogType.INFO,"List with alliances and specification",alliancesFields);
        return results;
    }

    @Override
    public Pagenator.PagenatedObject list(int page, int perPage, HashMap<String,Object> filters){
        return null;
    }

    @Override
    public List<T1> activeList(){
        loggerFile.createLog("activeList",LoggerFile.LogType.INFO,"Active list loaded");
        return repository.findByIsActive(true);
    }

    @Override
    public List<T1> list(){
      loggerFile.createLog("list",LoggerFile.LogType.INFO,"list loaded");
      return repository.findAll();
    }

    @Override
    public List<T1> activeList(String ... alliancesFields){
        List<T1> results = repository.findByIsActive(true);
        try{
            results = loadAlliances(results,alliancesFields);
        }catch (AllianceException| CrudGenericException e){
            e.printStackTrace();
        }
        loggerFile.createLog("activeList",LoggerFile.LogType.INFO,"Active List with alliances fields loaded",alliancesFields);
        return results;
    }

    @Override
    public <ID extends Serializable> T1 show(ID primaryKey)throws CrudGenericException {
        Object result = repository.findById(primaryKey).get();
        if (result != null){
            loggerFile.createLog("show",LoggerFile.LogType.INFO,"show success - " + primaryKey.toString(),result);
            return (T1)result;
        }
        throw new CrudGenericException(CrudGenericException.ExceptionType.INVALID_DATA_EXCEPTION, Constants.MSG_INVALID_DATA_EXCEPTION_CANNOT_FIND_RECORDS);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public T1 save(T1 entity) throws CrudGenericException{
        return (T1)repository.save(entity);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public T1 directSave(T1 entity){
        return (T1)repository.save(entity);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public T1 create(T1 entity) throws CrudGenericException{
        if (entity.getId() == null){
            entity = this.save(entity);
            loggerFile.createLog("create",LoggerFile.LogType.INFO,"save success",entity);
            return entity;
        }
        throw new CrudGenericException(CrudGenericException.ExceptionType.INVALID_DATA_EXCEPTION, Constants.MSG_INVALID_DATA_EXCEPTION_RECORD_ALREADY_EXIST);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public T1 update(T1 entity) throws CrudGenericException{
        T1 existingEntity = this.entityUpdateValidator(entity);
        loggerFile.createLog("update",LoggerFile.LogType.INFO,"update success - " + entity.getId().toString() + " - old data",existingEntity);
        loggerFile.createLog("update",LoggerFile.LogType.INFO,"update success - " + entity.getId().toString() + "- new data",entity);
        return this.save(entity);
    }

    protected T1 entityUpdateValidator(T1 entity) throws CrudGenericException{
        if(entity.getId() == null){
            throw new CrudGenericException(CrudGenericException.ExceptionType.INVALID_DATA_EXCEPTION, Constants.MSG_INVALID_DATA_EXCEPTION_CANNOT_FIND_RECORDS);
        }
        T1 existingEntity = show(entity.getId());
        if (existingEntity == null){
            throw new CrudGenericException(CrudGenericException.ExceptionType.INVALID_DATA_EXCEPTION, Constants.MSG_INVALID_DATA_EXCEPTION_CANNOT_FIND_RECORDS);
        }
        return existingEntity;
    }

    @Override
    public <ID extends Serializable> void delete(ID primaryKey) throws CrudGenericException{
        T1 existingEntity = show(primaryKey);
        loggerFile.createLog("delete",LoggerFile.LogType.INFO,"delete success - " + primaryKey.toString(),existingEntity);
        repository.delete(primaryKey);
    }

    @Override
    public <ID extends Serializable> void remove(ID primaryKey) throws CrudGenericException{
        T1 entity = show(primaryKey);
        entity.setIsActive(false);
        loggerFile.createLog("remove",LoggerFile.LogType.INFO,"disabled row - " + primaryKey.toString(),entity);
        update(entity);
    }

    @Override
    public <ID extends Serializable> T1 show(ID primaryKey, String ... alliancesFields ) throws AllianceException, CrudGenericException{
        T1 initResult = show(primaryKey);
        initResult = loadAlliances(Arrays.asList(initResult), alliancesFields).get(0);
        loggerFile.createLog("show",LoggerFile.LogType.INFO,"show alliances - " + primaryKey.toString(), initResult);
        return initResult;
    }

    /**
     *
     * @param page
     * @param perPage
     * @return
     * @deprecated use page() instead of list()
     */
    @Deprecated
    @Override
    public Pagenator.PagenatedObject list(int page,int perPage){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> processLogs = repository.findAll(pageable);
        loggerFile.createLog("list",LoggerFile.LogType.INFO,"Paginated List loaded");
        return Pagenator.setMetaData(processLogs);
    }

    /**
     *
     * @param page
     * @param perPage
     * @param specification
     * @return
     * @deprecated use page() instead of list()
     */
    @Deprecated
    @Override
    public Pagenator.PagenatedObject list(int page,int perPage,Specification<T1> specification){

        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> processLogs = repository.findAll(specification, pageable);
        loggerFile.createLog("list",LoggerFile.LogType.INFO,"Paginated List loaded with specification");
        return Pagenator.setMetaData(processLogs);
    }

    /**
     *
     * @param page
     * @param perPage
     * @param alliancesFields
     * @return
     * @deprecated use page() instead of list()
     */
    @Deprecated
    @Override
    public Pagenator.PagenatedObject list(int page,int perPage, String ... alliancesFields){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> pageResult = repository.findAll(pageable);
        loggerFile.createLog("list",LoggerFile.LogType.INFO,"Paginated List loaded with alliancesFields");
        Pagenator.PagenatedObject pagenatedObject = Pagenator.setMetaData(pageResult);
        return loadAlliancesForPaginatedList(pagenatedObject, alliancesFields);
    }

    /**
     *
     * @param page
     * @param perPage
     * @param specification
     * @param alliancesFields
     * @return
     * @deprecated use page() instead of list()
     */
    @Deprecated
    @Override
    public Pagenator.PagenatedObject list(int page, int perPage, Specification<T1> specification, String ... alliancesFields){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> pageResult = repository.findAll(specification, pageable);
        loggerFile.createLog("page",LoggerFile.LogType.INFO,"Paginated List loaded with specification and alliances");
        Pagenator.PagenatedObject pagenatedObject = Pagenator.setMetaData(pageResult);
        return loadAlliancesForPaginatedList(pagenatedObject, alliancesFields);

    }

    @Override
    public ResultPage page(int page, int perPage){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> processLogs = repository.findAll(pageable);
        loggerFile.createLog("page",LoggerFile.LogType.INFO,"Paginated List loaded");
        return new ResultPage.ResultPageBuilder(processLogs).build();
    }

    @Override
    public ResultPage page(int page,int perPage,Specification<T1> specification){

        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> processLogs = repository.findAll(specification, pageable);
        loggerFile.createLog("page",LoggerFile.LogType.INFO,"Paginated List loaded with specification");
        return new ResultPage.ResultPageBuilder(processLogs).build();
    }

    @Override
    public ResultPage page(int page,int perPage, String ... alliancesFields){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> pageResult = repository.findAll(pageable);
        loggerFile.createLog("page",LoggerFile.LogType.INFO,"Paginated List loaded with alliancesFields");
        return loadAlliancesForPaginatedList(new ResultPage.ResultPageBuilder(pageResult), alliancesFields);
    }

    @Override
    public ResultPage page(int page, int perPage, Specification<T1> specification, String ... alliancesFields){
        Pageable pageable = Pagenator.setPagination(page, perPage);
        Page<T1> pageResult = repository.findAll(specification, pageable);
        loggerFile.createLog("page",LoggerFile.LogType.INFO,"Paginated List loaded with specification and alliances");
        return loadAlliancesForPaginatedList(new ResultPage.ResultPageBuilder(pageResult), alliancesFields);

    }

    protected ResultPage loadAlliancesForPaginatedList(ResultPage.ResultPageBuilder resultPageBuilder,String ... alliancesFields){
        List<T1> results = (List<T1>) resultPageBuilder.getResult();
        try{
            results = loadAlliances(results,alliancesFields);
            resultPageBuilder.setResult(results);
        }catch (AllianceException| CrudGenericException e){
            e.printStackTrace();
        }
        return resultPageBuilder.build();
    }

    @Deprecated
    protected Pagenator.PagenatedObject loadAlliancesForPaginatedList(Pagenator.PagenatedObject pagenatedObject,String ... alliancesFields){
        List<T1> results = (List<T1>) pagenatedObject.getResult();
        try{
            results = loadAlliances(results,alliancesFields);
            pagenatedObject.setResult(results);
        }catch (AllianceException| CrudGenericException e){
            e.printStackTrace();
        }
        return pagenatedObject;
    }

    protected  <T2> List<T2> loadAlliances(List<T2> initResults, String ... alliancesFields) throws AllianceException, CrudGenericException{

        if(initResults == null || initResults.size() == 0){
            return initResults;
        }

        HashMap<String,HashMap<Object,Object>> alliancesFieldsPreviousDataHolder = new HashMap<>();

        for(T2 initResult: initResults){
            if(initResult == null){
                continue;
            }
            for (String alliancesFieldString: alliancesFields) {

                try {
                    Field allianceField = getAllianceFieldFromResult(initResult,alliancesFieldString);

                    Alliance alliance = getAllianceAnnotation(allianceField);

                    String localKey = alliance.localKey();
                    String foreignKey = alliance.foreignKey();
                    String[] subAlliances = alliance.alliances();

                    Class<?> allianceEntity = (Class<?>)((ParameterizedType) alliance.repositoryType().getGenericInterfaces()[0]).getActualTypeArguments()[0];

                    Boolean activeOnly = alliance.activeOnly();

                    GenericCrudRepository allianceRepository = getAllianceRepositoryBean(alliance.repositoryType());//B repo

                    Serializable allianceId = getAllianceFieldValue(initResult,localKey);

                    if(allianceId == null
                            || (Integer.class.isInstance(allianceId) && (Integer) allianceId  == 0)
                            || (String.class.isInstance(allianceId) && ("").equals(allianceId.toString()))){
                        continue;
                    }

                    Method allianceFieldSetMethod = getAllianceFieldSetMethod(alliancesFieldString,initResult);

                    Specification<Object> specification;

                    try {
                        WhereAlliance whereAlliance = getWhereAllianceAnnotation(allianceField);
                        String[] filters = whereAlliance.filters();
//                        Class<?> allianceEntity = whereAlliance.allianceEntity();
                        specification = filterInRelationTable(foreignKey,allianceId,activeOnly,filters,allianceEntity);
                    }catch (CrudGenericException e){
                        specification = filterInRelationTable(foreignKey,allianceId,activeOnly);
                    }

                    Object allianceObject;

                    if (Collection.class.isAssignableFrom(allianceField.getType())) {
                        allianceObject = allianceRepository.findAll(specification);
                        if(subAlliances.length > 0){
                            allianceObject = loadAlliances((ArrayList) allianceObject, subAlliances);
                        }
//                        try {
//                            String allianceObjectString = new ObjectMapper().writeValueAsString(allianceObject);
//                            allianceFieldSetMethod.invoke(initResult,new ObjectMapper().readValue(allianceObjectString,List.class));
                            allianceFieldSetMethod.invoke(initResult,allianceObject);
//                        }catch (IOException e) {
//                            allianceFieldSetMethod.invoke(initResult,allianceObject);
//                        }
                    }else {
                        alliancesFieldsPreviousDataHolder.putIfAbsent(alliancesFieldString,new HashMap<>());
                        HashMap<Object,Object> previouslyGatheredAlliances = alliancesFieldsPreviousDataHolder.get(alliancesFieldString);

                        allianceObject = previouslyGatheredAlliances.getOrDefault(allianceId,null);
                        if(allianceObject == null){
                            try{
                                allianceObject = allianceRepository.findOne(specification);
                                if(((Optional) allianceObject).isPresent()){
                                    allianceObject = ((Optional) allianceObject).get();
                                }else {
                                    allianceObject = null;
                                }
                            }catch (IncorrectResultSizeDataAccessException e){
                                throw new AllianceException(AllianceException.ExceptionType.INCORRECT_RESULT_SIZE_DATA_ACCESS_EXCEPTION, Constants.RESULT_RETURNS_MORE_THAN_ONE_ELEMENTS);
                            }
                            previouslyGatheredAlliances.put(allianceId,allianceObject);
                        }
                        if(subAlliances.length > 0){
                            allianceObject = loadAlliances(Arrays.asList(allianceObject), subAlliances).get(0);
                        }
//                        try {
//                            String allianceObjectString = new ObjectMapper().writeValueAsString(allianceObject);
//                            allianceFieldSetMethod.invoke(initResult,new ObjectMapper().readValue(allianceObjectString,(Class)allianceEntity));
                            allianceFieldSetMethod.invoke(initResult,allianceObject);
//                        } catch (IOException e) {
//                            allianceFieldSetMethod.invoke(initResult,allianceObject);
//                        }
                    }
                }catch (NoSuchMethodException e){
                    System.out.print(e.getMessage());
                }
                catch (InvocationTargetException e){
                    System.out.print(e.getMessage());

                }catch (IllegalAccessException e){
                    System.out.print(e.getMessage());
                }catch (ClassCastException e){
                    throw new CrudGenericException(CrudGenericException.ExceptionType.CANNOT_CAST_TO_GENERIC_CRUD_REPOSITORY,Constants.REPOSITORY_MUST_BE_A_INSTANCE_OF_GENERIC_CRUD_REPOSITORY);
                }
            }
        }
        return initResults;
    }

    private Specification<Object> filterInRelationTable(String foreignKey, Serializable foreignKeyValue, Boolean activeOnly) {
        return new Specification<Object>() {
            @Override
            public Predicate toPredicate(Root<Object> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

                List<Predicate> pd = new ArrayList<>();
                pd.add(criteriaBuilder.equal(root.get(foreignKey), foreignKeyValue));

                if(activeOnly){
                    pd.add(criteriaBuilder.equal(root.get("isActive"), true));
                }

//                criteriaQuery.orderBy(criteriaBuilder.desc(root.get("id")));
                return criteriaBuilder.and(pd.toArray(new Predicate[0]));
            }
        };
    }

    private Specification<Object> filterInRelationTable(String foreignKey, Serializable foreignKeyValue, Boolean activeOnly, String[] filters, Class<?> entity) {
        return new Specification<Object>() {
            @Override
            public Predicate toPredicate(Root<Object> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

                List<Predicate> pd = new ArrayList<>();
                pd.add(criteriaBuilder.equal(root.get(foreignKey), foreignKeyValue));

                if(activeOnly){
                    pd.add(criteriaBuilder.equal(root.get("isActive"), true));
                }

                for(String filter: filters){

                    if(filter.contains("=") && (!filter.contains("<") && !filter.contains(">")&& !filter.contains("!="))){
                        String[] filterObj = filter.split("=");
                        Object fieldValue = castValueToEntityField(entity,filterObj[0].trim(),filterObj[1].trim());
                        pd.add(criteriaBuilder.equal(root.get(filterObj[0].trim()), fieldValue));
                    }else if(filter.contains(">") && !filter.contains("=")){
                        String[] filterObj = filter.split(">");
                        pd.add(criteriaBuilder.greaterThan(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains(">=")){
                        String[] filterObj = filter.split(">=");
                        pd.add(criteriaBuilder.greaterThanOrEqualTo(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains("<") && !filter.contains("=")){
                        String[] filterObj = filter.split("<");
                        pd.add(criteriaBuilder.lessThan(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains("<=")){
                        String[] filterObj = filter.split("<=");
                        pd.add(criteriaBuilder.lessThanOrEqualTo(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains("!=")){
                        String[] filterObj = filter.split("!=");
                        pd.add(criteriaBuilder.lessThanOrEqualTo(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains("LIKE")){
                        String[] filterObj = filter.split("LIKE");
                        pd.add(criteriaBuilder.lessThanOrEqualTo(root.get(filterObj[0].trim()), filterObj[1].trim()));
                    }else if(filter.contains("IS NULL")){
                        String[] filterObj = filter.split("IS NULL");
                        pd.add(criteriaBuilder.isNull(root.get(filterObj[0].trim())));
                    }else if(filter.contains("IS NOT NULL")){
                        String[] filterObj = filter.split("IS NOT NULL");
                        pd.add(criteriaBuilder.isNotNull(root.get(filterObj[0].trim())));
                    }else if(filter.contains("IN")){
                        String[] filterObj = filter.split("IN");
                        String inListString = filterObj[1];
                        inListString = inListString.substring(inListString.indexOf("(")+1,inListString.indexOf(")"));
                        String[] inList = inListString.split("\\s*,\\s*");
                        List<String> items = Arrays.asList(inList).stream().map(str -> str.trim()).collect(Collectors.toList());
                        pd.add(root.get(filterObj[0].trim()).in(items));
                    }
                }
                return criteriaBuilder.and(pd.toArray(new Predicate[0]));
            }
        };
    }

}
